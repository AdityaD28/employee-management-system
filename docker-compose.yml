# Employee Management System - Docker Compose
# This file sets up PostgreSQL and Redis for local development
# Run with: docker compose up -d

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: ems_postgres
    environment:
      POSTGRES_DB: ems_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - ems_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for job queues
  redis:
    image: redis:7
    container_name: ems_redis
    ports:
      - "6379:6379"
    networks:
      - ems_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend service (optional for full Docker setup)
  backend:
    build: ./backend
    container_name: ems_backend
    environment:
      NODE_ENV: production
      PORT: 4000
      DATABASE_URL: postgres://postgres:password@postgres:5432/ems_dev
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your_jwt_secret_change_in_production
      REFRESH_TOKEN_SECRET: your_refresh_secret_change_in_production
    ports:
      - "4000:4000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ems_network
    profiles:
      - full  # Only start with 'docker compose --profile full up'

  # Frontend service (optional for full Docker setup)
  frontend:
    build: ./frontend
    container_name: ems_frontend
    environment:
      VITE_API_URL: http://localhost:4000/api
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - ems_network
    profiles:
      - full  # Only start with 'docker compose --profile full up'

volumes:
  postgres_data:

networks:
  ems_network:
    driver: bridge
